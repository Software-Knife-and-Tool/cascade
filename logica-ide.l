;;;
;;; logic-ide config
;;;
(:defcon genkey
  (let ((genkey-counter (make-output-string "0")))
    (closure (:lambda ()
      (let ((ctr (read (make-input-string (get-output-string-stream genkey-counter))))
            (name (make-output-string "")))
        (princ (fixnum+ 1 ctr) genkey-counter)
        (princ "%" name)
        (princ ctr name)
        (keyword (get-output-string-stream name)))))))

(:defcon with-ide (:lambda (ctx cmd :rest args)
  (let ((ide-fn-id (car ctx))
        (ide-ctx-id (cdr ctx)))
    (with-exception
      (:lambda () (invoke ide-fn-id (fmt :nil "~S" (list* ide-ctx-id cmd args))))
      (:lambda (ex)
        (when (eq (type-of ex) :except)
          (let* ((ex-view (view ex))
            (tag (svref ex-view 1))
            (source (svref ex-view 2))
            (frame (svref ex-view 3))
            (reason (svref ex-view 4)))
         (fmt :t "exception: ")
         (cond
           ((eq tag :arith) (fmt :t "arithmetic-error~%"))
           ((eq tag :cell) (fmt :t "cell-error~%"))
           ((eq tag :control) (fmt :t "control-error~%"))
           ((eq tag :eof) (fmt :t "end-of-file on stream ~A~%" source))
           ((eq tag :file) (fmt :t "file-error on ~A~%" source))
           ((eq tag :fpinex) (fmt :t "floating-point-inexact~%"))
           ((eq tag :fpinv) (fmt :t "floating-point-invalid-operation~%"))
           ((eq tag :fpover) (fmt :t "floating-point-overflow~%"))  
           ((eq tag :fpunder) (fmt :t "floating-point-underflow~%"))
           ((eq tag :parse) (fmt :t "parse-error while reading ~A~%" source))
           ((eq tag :print) (fmt :t "object ~A signals print-not-readable~%"))
           ((eq tag :program) (fmt :t "program-error~%"))
           ((eq tag :read) (fmt :t "reader-error~%"))
           ((eq tag :simple) (fmt :t "simple-error~%"))
           ((eq tag :store) (fmt :t "storage-condition~%"))
           ((eq tag :stream) (fmt :t "stream-error~%"))
           ((eq tag :type) (fmt :t "type-error from ~A~%" source))
           ((eq tag :unfunc) (fmt :t "undefined-function ~A~%" source))
           ((eq tag :unslot) (fmt :t "unbound-slot ~A~%"))
           ((eq tag :unsym) (fmt :t "the symbol ~A is unbound~%" source))
           ((eq tag :zerodiv) (fmt :t "arithmetic error division-by-zero~%"))
           (:t (fmt :t "undecoded-exception-type~%")))
         (fmt :t "    ~A~%" reason)
         (fmt :t "    from ~A~%~%" (cons (pprint pprint (svref frame 1)) (svref frame 3))))))))))

