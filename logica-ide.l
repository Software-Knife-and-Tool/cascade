;;;
;;; logic-ide config
;;;
(:defcon genkey
  (let ((genkey-counter (make-output-string "0")))
    (closure (:lambda ()
      (let ((ctr (read (make-input-string (get-output-string-stream genkey-counter))))
            (name (make-output-string "")))
        (princ (fixnum+ 1 ctr) genkey-counter)
        (princ "%" name)
        (princ ctr name)
        (keyword (get-output-string-stream name)))))))

(:defcon with-ide (:lambda (ctx cmd :rest args)
  (let ((ide-fn-id (car ctx))
        (ide-ctx-id (cdr ctx))
        (exmap '((:arith "arithmetic-error")
                 (:cell "cell-error")
                 (:control "control-error")
                 (:eof "end-of-file")
                 (:file "file-error")
                 (:fpinex "floating-point-inexact")
                 (:fpinv "floating-point-invalid-operation")
                 (:fpover "floating-point-overflow")  
                 (:fpunder "floating-point-underflow")
                 (:parse "parse-error")
                 (:print "object ~A signals print-not-readable")
                 (:program (fmt :t "program-error~%"))
                 (:read "reader-error")
                 (:simple "simple-error")
                 (:store "storage-condition")
                 (:stream "stream-error")
                 (:type "type-error")
                 (:unfunc "undefined-function")
                 (:unslot "unbound-slot")
                 (:unsym "unbound-symbol")
                 (:zerodiv "arithmetic error division-by-zero")))
        (maptag (:lambda (tag)
           (let ((str (assoc tag exmap)))
             (or str "undecoded-exception-type"))))
        (printex (:lambda (ex)
           (when (eq (type-of ex) :except)
              (let* ((ex-view (view ex))
                     (tag (svref ex-view 1))
                     (source (svref ex-view 2))
                     (frame (svref ex-view 3))
                     (reason (svref ex-view 4)))
                (fmt :t "with-ide exception: ~A ~A~%" (maptag tag) source)
                (fmt :t "    ~A~%" reason)
                (fmt :t "    from ~A~%~%" (cons (pprint pprint (svref frame 1)) (svref frame 3))))))))
        
    (with-exception
      (:lambda () (invoke ide-fn-id (fmt :nil "~S" (list* ide-ctx-id cmd args))))
      printex))))

